/********************************************************************
 * Automatically generated by ARUnit
 * Filename: SwcLceMaster_FixtureBase.cpp
 ********************************************************************/

#include "SwcLceMaster_FixtureBase.h"

#include <gmock/gmock.h>
#include "Rte_Type.h"
#include "Rte_SwcLceMaster.h"

#include <ctime>

using ::testing::_;
using ::testing::DoAll;
using ::testing::Return;
using ::testing::SetArgPointee;
using ::testing::SetArrayArgument;


SwcLceMaster_FixtureBase::SwcLceMaster_FixtureBase() :
    testing::Test()
    , _mock_SwcLceMaster()
    , _mock(_mock_SwcLceMaster)
    , _rteBuffer_SwcLceMaster(&_mock_SwcLceMaster)
    ,_rteBuffer(_rteBuffer_SwcLceMaster)
    , _rteTrace_SwcLceMaster(&_rteBuffer_SwcLceMaster)
    , _rteTrace(_rteTrace_SwcLceMaster)
    , _currentTime(0U)
    ,_RTERunnable_SwcLceMaster_RunMstr_10msTask_LastRunTime(0U)
{
    unsigned channelId = 0U;
    std::time_t startTime = std::time(0);
    _rteTrace_SwcLceMaster.setChannelId(++channelId);
    _rteTrace_SwcLceMaster.setStartTime(startTime);
}

SwcLceMaster_FixtureBase::~SwcLceMaster_FixtureBase()
{
}

void SwcLceMaster_FixtureBase::run(unsigned ms)
{
    unsigned newTime = _currentTime + ms;
    while(_currentTime < newTime)
    {
        setTime(_currentTime + 1);
        if(_currentTime== _RTERunnable_SwcLceMaster_RunMstr_10msTask_LastRunTime + RTERUNNABLE_SWCLCEMASTER_RUNMSTR_10MSTASK_PERIOD_MS) // position:
                {
                    RTERunnable_SwcLceMaster_RunMstr_10msTask();
                    _RTERunnable_SwcLceMaster_RunMstr_10msTask_LastRunTime = _currentTime;
                    _RTERunnable_SwcLceMaster_RunMstr_10msTask_WasExecuted = true;            
                }
																	                

    }
}
void SwcLceMaster_FixtureBase::reinitializeWithZeroes()
{
    testing::Mock::VerifyAndClear(&_mock_SwcLceMaster);
    Rte_SwcLceMaster_Mock_Set(&_rteTrace_SwcLceMaster);
    _mock_SwcLceMaster.reinitialize();
    initializeWithZeroes();
}
void SwcLceMaster_FixtureBase::reinitializeWithDefaultValues()
{
    testing::Mock::VerifyAndClear(&_mock_SwcLceMaster);
    Rte_SwcLceMaster_Mock_Set(&_rteTrace_SwcLceMaster);
    _mock_SwcLceMaster.reinitialize();
    initializeWithDefaultValues();
}

void SwcLceMaster_FixtureBase::SetUp(){
    reinitialize();
} 

void SwcLceMaster_FixtureBase::TearDown(){}

void SwcLceMaster_FixtureBase::setTime(unsigned ms)
{
    _currentTime = ms;
    _rteTrace_SwcLceMaster.setTime(_currentTime);
}

void SwcLceMaster_FixtureBase::initializeWithZeroes()
{
    ON_CALL(_mock_SwcLceMaster,Rte_Read_SwcLceMaster_Light_Ctrl_Inputs_ST_LP_LIN(_)).WillByDefault(DoAll(SetArgPointee<0>(0), Return(RTE_E_OK)));       
    ON_CALL(_mock_SwcLceMaster,Rte_Read_SwcLceMaster_Brightness_Rain_Sensor_ST_RB_LIN(_)).WillByDefault(DoAll(SetArgPointee<0>(0), Return(RTE_E_OK)));       
    ON_CALL(_mock_SwcLceMaster,Rte_Read_SwcLceMaster_Car_State_VEH_ST(_)).WillByDefault(DoAll(SetArgPointee<0>(0), Return(RTE_E_OK)));       
    ON_CALL(_mock_SwcLceMaster,Rte_Read_SwcLceMaster_Motor_Speed_Motor_Speed(_)).WillByDefault(DoAll(SetArgPointee<0>(0), Return(RTE_E_OK)));       
}

void SwcLceMaster_FixtureBase::initializeWithDefaultValues()
{
    ON_CALL(_mock_SwcLceMaster,Rte_Read_SwcLceMaster_Light_Ctrl_Inputs_ST_LP_LIN(_)).WillByDefault(DoAll(SetArgPointee<0>(0), Return(RTE_E_OK)));       
    ON_CALL(_mock_SwcLceMaster,Rte_Read_SwcLceMaster_Brightness_Rain_Sensor_ST_RB_LIN(_)).WillByDefault(DoAll(SetArgPointee<0>(0), Return(RTE_E_OK)));       
    ON_CALL(_mock_SwcLceMaster,Rte_Read_SwcLceMaster_Car_State_VEH_ST(_)).WillByDefault(DoAll(SetArgPointee<0>(0), Return(RTE_E_OK)));       
    ON_CALL(_mock_SwcLceMaster,Rte_Read_SwcLceMaster_Motor_Speed_Motor_Speed(_)).WillByDefault(DoAll(SetArgPointee<0>(0), Return(RTE_E_OK)));       
}
