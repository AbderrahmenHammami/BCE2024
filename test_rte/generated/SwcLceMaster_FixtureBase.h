/********************************************************************
 * Automatically generated by ARUnit
 * Filename: SwcLceMaster_FixtureBase.h
 ********************************************************************/

/*******************************************************************************************************
* Base test fixture class for added comfort while writing RTE level tests.
*******************************************************************************************************/

#ifndef SWCLCEMASTER_FIXTUREBASE_H_
#define SWCLCEMASTER_FIXTUREBASE_H_

#include "gtest/gtest.h"

#include "Rte_SwcLceMaster_Interface.h"
#include "Rte_SwcLceMaster_BufferDecorator.h"
#include "Rte_SwcLceMaster_Mock.h"
#include "Rte_SwcLceMaster_TraceDecorator.h"    


/** Performs basic RTE setup for tests.
*
* This includes optional rte buffer and trace. 
* Note that the trace isn't active until manually started.
*
*/
class SwcLceMaster_FixtureBase : public ::testing::Test
{
public:
    static const unsigned RTERUNNABLE_SWCLCEMASTER_RUNMSTR_10MSTASK_PERIOD_MS = 10u;
    ::testing::NiceMock <Rte_SwcLceMaster_Mock> _mock_SwcLceMaster;
    ::testing::NiceMock <Rte_SwcLceMaster_Mock>& _mock; // Shortcut without SWC name
    Rte_SwcLceMaster_BufferDecorator _rteBuffer_SwcLceMaster;
    Rte_SwcLceMaster_BufferDecorator& _rteBuffer; // Shortcut without SWC name
    Rte_SwcLceMaster_TraceDecorator _rteTrace_SwcLceMaster;
    Rte_SwcLceMaster_TraceDecorator& _rteTrace; // Shortcut without SWC name
    
    SwcLceMaster_FixtureBase();
    
    
    /// Runs for given milliseconds. Will call cyclic runnables if they are scheduling in that time slot.
    virtual void run(unsigned ms);
    
    /// Will clear all test setup (expectations and on_calls) and re-initialize
    virtual void reinitialize() {
        reinitializeWithDefaultValues();
    }

    virtual void reinitializeWithZeroes();
    virtual void reinitializeWithDefaultValues();
    
    //Define server call points
    
    virtual void setTime(unsigned ms);
    
    virtual unsigned getTime() { return _currentTime; }
    
    /* initializes with 0 */
    virtual void initializeWithZeroes();
    
    /* initializes with specified init values or another possible value. Other possible value can be enumeration value or 0. */
    virtual void initializeWithDefaultValues();
    
protected:
    unsigned _currentTime;
    unsigned _RTERunnable_SwcLceMaster_RunMstr_10msTask_LastRunTime;
    bool _RTERunnable_SwcLceMaster_RunMstr_10msTask_WasExecuted;            
    
    virtual ~SwcLceMaster_FixtureBase();
    virtual void SetUp();
    virtual void TearDown();
};
#endif /* SWCLCEMASTER_FixtureBase_H_*/
