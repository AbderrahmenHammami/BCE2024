/********************************************************************
 * Automatically generated by ARUnit
 * Filename: SwcLceComManager_FixtureBase.cpp
 ********************************************************************/

#include "SwcLceComManager_FixtureBase.h"

#include <gmock/gmock.h>
#include "Rte_Type.h"
#include "Rte_SwcLceComManager.h"

#include <ctime>

using ::testing::_;
using ::testing::DoAll;
using ::testing::Return;
using ::testing::SetArgPointee;
using ::testing::SetArrayArgument;


SwcLceComManager_FixtureBase::SwcLceComManager_FixtureBase() :
    testing::Test()
    , _mock_SwcLceComManager()
    , _mock(_mock_SwcLceComManager)
    , _rteBuffer_SwcLceComManager(&_mock_SwcLceComManager)
    ,_rteBuffer(_rteBuffer_SwcLceComManager)
    , _rteTrace_SwcLceComManager(&_rteBuffer_SwcLceComManager)
    , _rteTrace(_rteTrace_SwcLceComManager)
    , _currentTime(0U)
    ,_RTERunnable_SwcLceComManager_RunComMngr_10msTask_LastRunTime(0U)
{
    unsigned channelId = 0U;
    std::time_t startTime = std::time(0);
    _rteTrace_SwcLceComManager.setChannelId(++channelId);
    _rteTrace_SwcLceComManager.setStartTime(startTime);
}

SwcLceComManager_FixtureBase::~SwcLceComManager_FixtureBase()
{
}

void SwcLceComManager_FixtureBase::run(unsigned ms)
{
    unsigned newTime = _currentTime + ms;
    while(_currentTime < newTime)
    {
        setTime(_currentTime + 1);
        if(_currentTime== _RTERunnable_SwcLceComManager_RunComMngr_10msTask_LastRunTime + RTERUNNABLE_SWCLCECOMMANAGER_RUNCOMMNGR_10MSTASK_PERIOD_MS) // position:
                {
                    RTERunnable_SwcLceComManager_RunComMngr_10msTask();
                    _RTERunnable_SwcLceComManager_RunComMngr_10msTask_LastRunTime = _currentTime;
                    _RTERunnable_SwcLceComManager_RunComMngr_10msTask_WasExecuted = true;            
                }
																	                

    }
}
void SwcLceComManager_FixtureBase::reinitializeWithZeroes()
{
    testing::Mock::VerifyAndClear(&_mock_SwcLceComManager);
    Rte_SwcLceComManager_Mock_Set(&_rteTrace_SwcLceComManager);
    _mock_SwcLceComManager.reinitialize();
    initializeWithZeroes();
}
void SwcLceComManager_FixtureBase::reinitializeWithDefaultValues()
{
    testing::Mock::VerifyAndClear(&_mock_SwcLceComManager);
    Rte_SwcLceComManager_Mock_Set(&_rteTrace_SwcLceComManager);
    _mock_SwcLceComManager.reinitialize();
    initializeWithDefaultValues();
}

void SwcLceComManager_FixtureBase::SetUp(){
    reinitialize();
} 

void SwcLceComManager_FixtureBase::TearDown(){}

void SwcLceComManager_FixtureBase::setTime(unsigned ms)
{
    _currentTime = ms;
    _rteTrace_SwcLceComManager.setTime(_currentTime);
}

void SwcLceComManager_FixtureBase::initializeWithZeroes()
{
    ON_CALL(_mock_SwcLceComManager,Rte_Read_SwcLceComManager_comLight_Ctrl_Inputs_ST_LP_LIN(_)).WillByDefault(DoAll(SetArgPointee<0>(0), Return(RTE_E_OK)));       
    ON_CALL(_mock_SwcLceComManager,Rte_Read_SwcLceComManager_comBrightness_Rain_Sensor_ST_RB_LIN(_)).WillByDefault(DoAll(SetArgPointee<0>(0), Return(RTE_E_OK)));       
    ON_CALL(_mock_SwcLceComManager,Rte_Read_SwcLceComManager_comCar_State_VEH_ST(_)).WillByDefault(DoAll(SetArgPointee<0>(0), Return(RTE_E_OK)));       
    ON_CALL(_mock_SwcLceComManager,Rte_Read_SwcLceComManager_comMotor_Speed_Motor_Speed(_)).WillByDefault(DoAll(SetArgPointee<0>(0), Return(RTE_E_OK)));       
}

void SwcLceComManager_FixtureBase::initializeWithDefaultValues()
{
    ON_CALL(_mock_SwcLceComManager,Rte_Read_SwcLceComManager_comLight_Ctrl_Inputs_ST_LP_LIN(_)).WillByDefault(DoAll(SetArgPointee<0>(0), Return(RTE_E_OK)));       
    ON_CALL(_mock_SwcLceComManager,Rte_Read_SwcLceComManager_comBrightness_Rain_Sensor_ST_RB_LIN(_)).WillByDefault(DoAll(SetArgPointee<0>(0), Return(RTE_E_OK)));       
    ON_CALL(_mock_SwcLceComManager,Rte_Read_SwcLceComManager_comCar_State_VEH_ST(_)).WillByDefault(DoAll(SetArgPointee<0>(0), Return(RTE_E_OK)));       
    ON_CALL(_mock_SwcLceComManager,Rte_Read_SwcLceComManager_comMotor_Speed_Motor_Speed(_)).WillByDefault(DoAll(SetArgPointee<0>(0), Return(RTE_E_OK)));       
}
